"""import numpy.polynomial.polynomial as P
class Interpolate():

    def solve(self,X,F,method):
        if method=='lagarange':
            x=[1]
            for i in range(len(X)):
                x=P.polymul(x,[-1*X[i],1])
            b=[0]
            for i in range(len(X)):
                a=P.polydiv(x,[-1*X[i],1])
                b=P.polyadd(P.polymul((P.polydiv(a[0],P.polyval(X[i],a[0])))[0],[F[i]]),b)
            return b

        if method=='newton':
            def ff(i,j):
                if i==j:
                    return F[i]
                else:
                    return (ff(i+1,j)-ff(i,j-1))/float(X[j]-X[i])
            sum=[0]
            for i in range(len(X)):
                mul=[1]
                for j in range(i):
                    mul=P.polymul(mul,[-1*X[j],1])
                sum=P.polyadd(sum,P.polymul(mul,ff(0,i)))
            return sum"""
            
""" Including Graphs """
import sympy as sp
import matplotlib.pyplot as plt
import numpy as np


class Interpolate:
    ls_1, ls_2, ls_3 = [], [], []
    x = sp.Symbol('x')

    def lagrange_poly(self, list_a, list_b):
        self.ls_2, self.ls_3 = list_a, list_b
        for i in range(len(list_a)):
            u, j = 1, 0
            while j < len(list_a):
                if i != j:
                    u *= (self.x-list_a[j])/(list_a[i]-list_a[j])
                j += 1
            u *= list_b[i]
            self.ls_1.append(u)
        self.plot_lagrange_poly()

    def plot_lagrange_poly(self, var=[]):
        arr = np.arange(0, max(self.ls_2) + 0.2, 0.1)
        sum_of_poly = 0
        for i in self.ls_1:
            sum_of_poly += i
            for j in arr:
                var.append(sp.limit(i, self.x, j))
            plt.plot(arr, var)
            var = []
        for j in arr:
                var.append(sp.limit(sum_of_poly, self.x, j))
        plt.plot(arr, var, 'k')
        plt.plot(self.ls_2, self.ls_3, 'ro')
        plt.title('Interpolating Polynomial')
        plt.xlabel('X-Axis')
        plt.ylabel('Y-Axis')
        plt.show()
