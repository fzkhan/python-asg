"""class Integrate:
	def __init__(self):
		self.l=[]
		self.s=0
		self.k=0
	def solve(self,a,b,n,f,method):
	# f,a,b = function defined,lower limit,upper limit
		if method=='trapezoid':
			for i in range(n+1):
				self.l.append(a+((b-a)*i)/n)
			for j in range(1,n):
				self.s=self.s+f(self.l[j])
			return((b-a)*(f(self.l[0])+f(self.l[n])+2*self.s))/(2*n)
		elif method=='simpson':
			for i in range(2*n+1):
				self.l.append(a+((b-a)*i)/(2*n))
			for j in range(1,n+1):
				self.s=self.s+f(self.l[2*j-1])
			for g in range(2,n+1):
				self.k=self.k+f(self.l[2*g-2])
			return((b-a)*(f(self.l[0])+f(self.l[2*n])+4*self.s+2*self.k))/(6*n)"""

import numpy as np
import matplotlib.pyplot as plt


class Integrate():

    def trapez(self, func, a, b, n):

        self.x = np.linspace(a, b, n+1)
        y = func(self.x)
        s = y[0] + 2.0 * sum(y[1:n]) + y[n]
        h = float(b-a)/n
        return s * h / 2.0


    def simpson(self, func, a, b, n):
        self.x = np.linspace(a, b, n+1)
        y = func(self.x)

        h = float(self.x[1] - self.x[0])
        n = len(self.x) - 1
        if n % 2 == 1:
            n -= 1
        s = y[0] + y[n] + 4.0 * sum(y[1:-1:2]) + 2.0 * sum(y[2:-2:2])
        return h * s / 3.0


    def sim_plot(self, func, a, b, n):
        x = np.arange(a, b, 0.1)
        y = func(x)
        plt.plot(x, y, 'r-')
        z = np.linspace(a, b, n)
        g, h = [], []
        i = 0
        while i < len(z)-1:
            g.append((z[i]+z[i+1])/2.0)
            i += 1

        for i in g:
            h.append(func(i))
        w = z[1]-z[0]

        v = z
        v = np.delete(v, len(v)-1)
        plt.bar(v, h, width=w)
        for i, j in zip(g, h):
            plt.plot([i, i], [j, 0], 'b--')
        plt.title("Integration by Simpson's Method")
        plt.xlabel('X-Axis')
        plt.ylabel('Y-Axis')

    def trapez_plot(self, f, a, b, n):
        x = np.arange(a, b, 0.1)
        y = f(x)
        plt.plot(x, y, 'g--')
        z = np.linspace(a, b, n)
        y = [0] * n
        plt.plot(z, y, 'ro-')
        plt.plot(z, f(z), 'ro')
        c = f(z)
        for i, j in zip(z, c):
            plt.plot([i, i], [j, 0], 'ro-')
        plt.plot(z, f(z), 'ro-')
        plt.title('Integration By Trapezoidal Method')
        plt.xlabel('X-Axis')
        plt.ylabel('Y-Axis')
